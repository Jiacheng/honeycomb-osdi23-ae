use validator_macros::Opcode;

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SOP2Opcode {
    S_ADD_U32 = 0,
    S_SUB_U32 = 1,
    S_ADD_I32 = 2,
    S_SUB_I32 = 3,
    S_ADDC_U32 = 4,
    S_SUBB_U32 = 5,
    S_MIN_I32 = 6,
    S_MIN_U32 = 7,
    S_MAX_I32 = 8,
    S_MAX_U32 = 9,
    S_CSELECT_B32 = 10,
    S_CSELECT_B64 = 11,
    S_AND_B32 = 14,
    S_AND_B64 = 15,
    S_OR_B32 = 16,
    S_OR_B64 = 17,
    S_XOR_B32 = 18,
    S_XOR_B64 = 19,
    S_ANDN2_B32 = 20,
    S_ANDN2_B64 = 21,
    S_ORN2_B32 = 22,
    S_ORN2_B64 = 23,
    S_NAND_B32 = 24,
    S_NAND_B64 = 25,
    S_NOR_B32 = 26,
    S_NOR_B64 = 27,
    S_XNOR_B32 = 28,
    S_XNOR_B64 = 29,
    S_LSHL_B32 = 30,
    S_LSHL_B64 = 31,
    S_LSHR_B32 = 32,
    S_LSHR_B64 = 33,
    S_ASHR_I32 = 34,
    S_ASHR_I64 = 35,
    S_BFM_B32 = 36,
    S_BFM_B64 = 37,
    S_MUL_I32 = 38,
    S_BFE_U32 = 39,
    S_BFE_I32 = 40,
    S_BFE_U64 = 41,
    S_BFE_I64 = 42,
    S_ABSDIFF_I32 = 44,
    S_LSHL1_ADD_U32 = 46,
    S_LSHL2_ADD_U32 = 47,
    S_LSHL3_ADD_U32 = 48,
    S_LSHL4_ADD_U32 = 49,
    S_PACK_LL_B32_B16 = 50,
    S_PACK_LH_B32_B16 = 51,
    S_PACK_HH_B32_B16 = 52,
    S_MUL_HI_U32 = 53,
    S_MUL_HI_I32 = 54,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SOP1Opcode {
    S_MOV_B32 = 3,
    S_MOV_B64 = 4,
    S_CMOV_B32 = 5,
    S_CMOV_B64 = 6,
    S_NOT_B32 = 7,
    S_NOT_B64 = 8,
    S_WQM_B32 = 9,
    S_WQM_B64 = 10,
    S_BREV_B32 = 11,
    S_BREV_B64 = 12,
    S_BCNT0_I32_B32 = 13,
    S_BCNT0_I32_B64 = 14,
    S_BCNT1_I32_B32 = 15,
    S_BCNT1_I32_B64 = 16,
    S_FF0_I32_B32 = 17,
    S_FF0_I32_B64 = 18,
    S_FF1_I32_B32 = 19,
    S_FF1_I32_B64 = 20,
    S_FLBIT_I32_B32 = 21,
    S_FLBIT_I32_B64 = 22,
    S_FLBIT_I32 = 23,
    S_FLBIT_I32_I64 = 24,
    S_SEXT_I32_I8 = 25,
    S_SEXT_I32_I16 = 26,
    S_BITSET0_B32 = 27,
    S_BITSET0_B64 = 28,
    S_BITSET1_B32 = 29,
    S_BITSET1_B64 = 30,
    S_GETPC_B64 = 31,
    S_SETPC_B64 = 32,
    S_SWAPPC_B64 = 33,
    S_RFE_B64 = 34,
    S_AND_SAVEEXEC_B64 = 36,
    S_OR_SAVEEXEC_B64 = 37,
    S_XOR_SAVEEXEC_B64 = 38,
    S_ANDN2_SAVEEXEC_B64 = 39,
    S_ORN2_SAVEEXEC_B64 = 40,
    S_NAND_SAVEEXEC_B64 = 41,
    S_NOR_SAVEEXEC_B64 = 42,
    S_XNOR_SAVEEXEC_B64 = 43,
    S_QUADMASK_B32 = 44,
    S_QUADMASK_B64 = 45,
    S_MOVRELS_B32 = 46,
    S_MOVRELS_B64 = 47,
    S_MOVRELD_B32 = 48,
    S_MOVRELD_B64 = 49,
    S_ABS_I32 = 52,
    S_ANDN1_SAVEEXEC_B64 = 55,
    S_ORN1_SAVEEXEC_B64 = 56,
    S_ANDN1_WREXEC_B64 = 57,
    S_ANDN2_WREXEC_B64 = 58,
    S_BITREPLICATE_B64_B32 = 59,
    S_AND_SAVEEXEC_B32 = 60,
    S_OR_SAVEEXEC_B32 = 61,
    S_XOR_SAVEEXEC_B32 = 62,
    S_ANDN2_SAVEEXEC_B32 = 63,
    S_ORN2_SAVEEXEC_B32 = 64,
    S_NAND_SAVEEXEC_B32 = 65,
    S_NOR_SAVEEXEC_B32 = 66,
    S_XNOR_SAVEEXEC_B32 = 67,
    S_ANDN1_SAVEEXEC_B32 = 68,
    S_ORN1_SAVEEXEC_B32 = 69,
    S_ANDN1_WREXEC_B32 = 70,
    S_ANDN2_WREXEC_B32 = 71,
    S_MOVRELSD_2_B32 = 73,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SOPKOpcode {
    S_MOVK_I32 = 0,
    S_VERSION = 1,
    S_CMOVK_I32 = 2,
    S_CMPK_EQ_I32 = 3,
    S_CMPK_LG_I32 = 4,
    S_CMPK_GT_I32 = 5,
    S_CMPK_GE_I32 = 6,
    S_CMPK_LT_I32 = 7,
    S_CMPK_LE_I32 = 8,
    S_CMPK_EQ_U32 = 9,
    S_CMPK_LG_U32 = 10,
    S_CMPK_GT_U32 = 11,
    S_CMPK_GE_U32 = 12,
    S_CMPK_LT_U32 = 13,
    S_CMPK_LE_U32 = 14,
    S_ADDK_I32 = 15,
    S_MULK_I32 = 16,
    S_GETREG_B32 = 18,
    S_SETREG_B32 = 19,
    S_SETREG_IMM32_B32 = 21,
    S_CALL_B64 = 22,
    S_WAITCNT_VSCNT = 23,
    S_WAITCNT_VMCNT = 24,
    S_WAITCNT_EXPCNT = 25,
    S_WAITCNT_LGKMCNT = 26,
    S_SUBVECTOR_LOOP_BEGIN = 27,
    S_SUBVECTOR_LOOP_END = 28,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SOPCOpcode {
    S_CMP_EQ_I32 = 0,
    S_CMP_LG_I32 = 1,
    S_CMP_GT_I32 = 2,
    S_CMP_GE_I32 = 3,
    S_CMP_LT_I32 = 4,
    S_CMP_LE_I32 = 5,
    S_CMP_EQ_U32 = 6,
    S_CMP_LG_U32 = 7,
    S_CMP_GT_U32 = 8,
    S_CMP_GE_U32 = 9,
    S_CMP_LT_U32 = 10,
    S_CMP_LE_U32 = 11,
    S_BITCMP0_B32 = 12,
    S_BITCMP1_B32 = 13,
    S_BITCMP0_B64 = 14,
    S_BITCMP1_B64 = 15,
    S_CMP_EQ_U64 = 18,
    S_CMP_LG_U64 = 19,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SOPPOpcode {
    S_NOP = 0,
    S_ENDPGM = 1,
    S_BRANCH = 2,
    S_WAKEUP = 3,
    S_CBRANCH_SCC0 = 4,
    S_CBRANCH_SCC1 = 5,
    S_CBRANCH_VCCZ = 6,
    S_CBRANCH_VCCNZ = 7,
    S_CBRANCH_EXECZ = 8,
    S_CBRANCH_EXECNZ = 9,
    S_BARRIER = 10,
    S_SETKILL = 11,
    S_WAITCNT = 12,
    S_SETHALT = 13,
    S_SLEEP = 14,
    S_SETPRIO = 15,
    S_SENDMSG = 16,
    S_SENDMSGHALT = 17,
    S_TRAP = 18,
    S_ICACHE_INV = 19,
    S_INCPERFLEVEL = 20,
    S_DECPERFLEVEL = 21,
    S_TTRACEDATA = 22,
    S_CBRANCH_CDBGSYS = 23,
    S_CBRANCH_CDBGUSER = 24,
    S_CBRANCH_CDBGSYS_OR_USER = 25,
    S_CBRANCH_CDBGSYS_AND_USER = 26,
    S_ENDPGM_SAVED = 27,
    S_ENDPGM_ORDERED_PS_DONE = 30,
    S_CODE_END = 31,
    S_INST_PREFETCH = 32,
    S_CLAUSE = 33,
    S_WAITCNT_DEPCTR = 35,
    S_ROUND_MODE = 36,
    S_DENORM_MODE = 37,
    S_TTRACEDATA_IMM = 40,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum SMEMOpcode {
    S_LOAD_DWORD = 0,
    S_LOAD_DWORDX2 = 1,
    S_LOAD_DWORDX4 = 2,
    S_LOAD_DWORDX8 = 3,
    S_LOAD_DWORDX16 = 4,
    S_BUFFER_LOAD_DWORD = 8,
    S_BUFFER_LOAD_DWORDX2 = 9,
    S_BUFFER_LOAD_DWORDX4 = 10,
    S_BUFFER_LOAD_DWORDX8 = 11,
    S_BUFFER_LOAD_DWORDX16 = 12,
    S_GL1_INV = 31,
    S_DCACHE_INV = 32,
    S_MEMTIME = 36,
    S_MEMREALTIME = 37,
    S_ATC_PROBE = 38,
    S_ATC_PROBE_BUFFER = 39,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VOP1Opcode {
    V_NOP = 0,
    V_MOV_B32 = 1,
    V_READFIRSTLANE_B32 = 2,
    V_CVT_I32_F64 = 3,
    V_CVT_F64_I32 = 4,
    V_CVT_F32_I32 = 5,
    V_CVT_F32_U32 = 6,
    V_CVT_U32_F32 = 7,
    V_CVT_I32_F32 = 8,
    V_CVT_F16_F32 = 10,
    V_CVT_F32_F16 = 11,
    V_CVT_RPI_I32_F32 = 12,
    V_CVT_FLR_I32_F32 = 13,
    V_CVT_OFF_F32_I4 = 14,
    V_CVT_F32_F64 = 15,
    V_CVT_F64_F32 = 16,
    V_CVT_F32_UBYTE0 = 17,
    V_CVT_F32_UBYTE1 = 18,
    V_CVT_F32_UBYTE2 = 19,
    V_CVT_F32_UBYTE3 = 20,
    V_CVT_U32_F64 = 21,
    V_CVT_F64_U32 = 22,
    V_TRUNC_F64 = 23,
    V_CEIL_F64 = 24,
    V_RNDNE_F64 = 25,
    V_FLOOR_F64 = 26,
    V_PIPEFLUSH = 27,
    V_FRACT_F32 = 32,
    V_TRUNC_F32 = 33,
    V_CEIL_F32 = 34,
    V_RNDNE_F32 = 35,
    V_FLOOR_F32 = 36,
    V_EXP_F32 = 37,
    V_LOG_F32 = 39,
    V_RCP_F32 = 42,
    V_RCP_IFLAG_F32 = 43,
    V_RSQ_F32 = 46,
    V_RCP_F64 = 47,
    V_RSQ_F64 = 49,
    V_SQRT_F32 = 51,
    V_SQRT_F64 = 52,
    V_SIN_F32 = 53,
    V_COS_F32 = 54,
    V_NOT_B32 = 55,
    V_BFREV_B32 = 56,
    V_FFBH_U32 = 57,
    V_FFBL_B32 = 58,
    V_FFBH_I32 = 59,
    V_FREXP_EXP_I32_F64 = 60,
    V_FREXP_MANT_F64 = 61,
    V_FRACT_F64 = 62,
    V_FREXP_EXP_I32_F32 = 63,
    V_FREXP_MANT_F32 = 64,
    V_CLREXCP = 65,
    V_MOVRELD_B32 = 66,
    V_MOVRELS_B32 = 67,
    V_MOVRELSD_B32 = 68,
    V_MOVRELSD_2_B32 = 72,
    V_CVT_F16_U16 = 80,
    V_CVT_F16_I16 = 81,
    V_CVT_U16_F16 = 82,
    V_CVT_I16_F16 = 83,
    V_RCP_F16 = 84,
    V_SQRT_F16 = 85,
    V_RSQ_F16 = 86,
    V_LOG_F16 = 87,
    V_EXP_F16 = 88,
    V_FREXP_MANT_F16 = 89,
    V_FREXP_EXP_I16_F16 = 90,
    V_FLOOR_F16 = 91,
    V_CEIL_F16 = 92,
    V_TRUNC_F16 = 93,
    V_RNDNE_F16 = 94,
    V_FRACT_F16 = 95,
    V_SIN_F16 = 96,
    V_COS_F16 = 97,
    V_SAT_PK_U8_I16 = 98,
    V_CVT_NORM_I16_F16 = 99,
    V_CVT_NORM_U16_F16 = 100,
    V_SWAP_B32 = 101,
    V_SWAPREL_B32 = 104,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VOP2Opcode {
    V_CNDMASK_B32 = 1,
    V_DOT2C_F32_F16 = 2,
    V_ADD_F32 = 3,
    V_SUB_F32 = 4,
    V_SUBREV_F32 = 5,
    V_FMAC_LEGACY_F32 = 6,
    V_MUL_LEGACY_F32 = 7,
    V_MUL_F32 = 8,
    V_MUL_I32_I24 = 9,
    V_MUL_HI_I32_I24 = 10,
    V_MUL_U32_U24 = 11,
    V_MUL_HI_U32_U24 = 12,
    V_DOT4C_I32_I8 = 13,
    V_MIN_F32 = 15,
    V_MAX_F32 = 16,
    V_MIN_I32 = 17,
    V_MAX_I32 = 18,
    V_MIN_U32 = 19,
    V_MAX_U32 = 20,
    V_LSHRREV_B32 = 22,
    V_ASHRREV_I32 = 24,
    V_LSHLREV_B32 = 26,
    V_AND_B32 = 27,
    V_OR_B32 = 28,
    V_XOR_B32 = 29,
    V_XNOR_B32 = 30,
    V_ADD_NC_U32 = 37,
    V_SUB_NC_U32 = 38,
    V_SUBREV_NC_U32 = 39,
    V_ADD_CO_CI_U32 = 40,
    V_SUB_CO_CI_U32 = 41,
    V_SUBREV_CO_CI_U32 = 42,
    V_FMAC_F32 = 43,
    V_FMAMK_F32 = 44,
    V_FMAAK_F32 = 45,
    V_CVT_PKRTZ_F16_F32 = 47,
    V_ADD_F16 = 50,
    V_SUB_F16 = 51,
    V_SUBREV_F16 = 52,
    V_MUL_F16 = 53,
    V_FMAC_F16 = 54,
    V_FMAMK_F16 = 55,
    V_FMAAK_F16 = 56,
    V_MAX_F16 = 57,
    V_MIN_F16 = 58,
    V_LDEXP_F16 = 59,
    V_PK_FMAC_F16 = 60,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VOPCOpcode {
    V_CMP_F_F32 = 0,
    V_CMP_LT_F32 = 1,
    V_CMP_EQ_F32 = 2,
    V_CMP_LE_F32 = 3,
    V_CMP_GT_F32 = 4,
    V_CMP_LG_F32 = 5,
    V_CMP_GE_F32 = 6,
    V_CMP_O_F32 = 7,
    V_CMP_U_F32 = 8,
    V_CMP_NGE_F32 = 9,
    V_CMP_NLG_F32 = 10,
    V_CMP_NGT_F32 = 11,
    V_CMP_NLE_F32 = 12,
    V_CMP_NEQ_F32 = 13,
    V_CMP_NLT_F32 = 14,
    V_CMP_TRU_F32 = 15,
    V_CMPX_F_F32 = 16,
    V_CMPX_LT_F32 = 17,
    V_CMPX_EQ_F32 = 18,
    V_CMPX_LE_F32 = 19,
    V_CMPX_GT_F32 = 20,
    V_CMPX_LG_F32 = 21,
    V_CMPX_GE_F32 = 22,
    V_CMPX_O_F32 = 23,
    V_CMPX_U_F32 = 24,
    V_CMPX_NGE_F32 = 25,
    V_CMPX_NLG_F32 = 26,
    V_CMPX_NGT_F32 = 27,
    V_CMPX_NLE_F32 = 28,
    V_CMPX_NEQ_F32 = 29,
    V_CMPX_NLT_F32 = 30,
    V_CMPX_TRU_F32 = 31,
    V_CMP_F_F64 = 32,
    V_CMP_LT_F64 = 33,
    V_CMP_EQ_F64 = 34,
    V_CMP_LE_F64 = 35,
    V_CMP_GT_F64 = 36,
    V_CMP_LG_F64 = 37,
    V_CMP_GE_F64 = 38,
    V_CMP_O_F64 = 39,
    V_CMP_U_F64 = 40,
    V_CMP_NGE_F64 = 41,
    V_CMP_NLG_F64 = 42,
    V_CMP_NGT_F64 = 43,
    V_CMP_NLE_F64 = 44,
    V_CMP_NEQ_F64 = 45,
    V_CMP_NLT_F64 = 46,
    V_CMP_TRU_F64 = 47,
    V_CMPX_F_F64 = 48,
    V_CMPX_LT_F64 = 49,
    V_CMPX_EQ_F64 = 50,
    V_CMPX_LE_F64 = 51,
    V_CMPX_GT_F64 = 52,
    V_CMPX_LG_F64 = 53,
    V_CMPX_GE_F64 = 54,
    V_CMPX_O_F64 = 55,
    V_CMPX_U_F64 = 56,
    V_CMPX_NGE_F64 = 57,
    V_CMPX_NLG_F64 = 58,
    V_CMPX_NGT_F64 = 59,
    V_CMPX_NLE_F64 = 60,
    V_CMPX_NEQ_F64 = 61,
    V_CMPX_NLT_F64 = 62,
    V_CMPX_TRU_F64 = 63,
    V_CMP_F_I32 = 128,
    V_CMP_LT_I32 = 129,
    V_CMP_EQ_I32 = 130,
    V_CMP_LE_I32 = 131,
    V_CMP_GT_I32 = 132,
    V_CMP_NE_I32 = 133,
    V_CMP_GE_I32 = 134,
    V_CMP_T_I32 = 135,
    V_CMP_CLASS_F32 = 136,
    V_CMP_LT_I16 = 137,
    V_CMP_EQ_I16 = 138,
    V_CMP_LE_I16 = 139,
    V_CMP_GT_I16 = 140,
    V_CMP_NE_I16 = 141,
    V_CMP_GE_I16 = 142,
    V_CMP_CLASS_F16 = 143,
    V_CMPX_F_I32 = 144,
    V_CMPX_LT_I32 = 145,
    V_CMPX_EQ_I32 = 146,
    V_CMPX_LE_I32 = 147,
    V_CMPX_GT_I32 = 148,
    V_CMPX_NE_I32 = 149,
    V_CMPX_GE_I32 = 150,
    V_CMPX_T_I32 = 151,
    V_CMPX_CLASS_F32 = 152,
    V_CMPX_LT_I16 = 153,
    V_CMPX_EQ_I16 = 154,
    V_CMPX_LE_I16 = 155,
    V_CMPX_GT_I16 = 156,
    V_CMPX_NE_I16 = 157,
    V_CMPX_GE_I16 = 158,
    V_CMPX_CLASS_F16 = 159,
    V_CMP_F_I64 = 160,
    V_CMP_LT_I64 = 161,
    V_CMP_EQ_I64 = 162,
    V_CMP_LE_I64 = 163,
    V_CMP_GT_I64 = 164,
    V_CMP_NE_I64 = 165,
    V_CMP_GE_I64 = 166,
    V_CMP_T_I64 = 167,
    V_CMP_CLASS_F64 = 168,
    V_CMP_LT_U16 = 169,
    V_CMP_EQ_U16 = 170,
    V_CMP_LE_U16 = 171,
    V_CMP_GT_U16 = 172,
    V_CMP_NE_U16 = 173,
    V_CMP_GE_U16 = 174,
    V_CMPX_F_I64 = 176,
    V_CMPX_LT_I64 = 177,
    V_CMPX_EQ_I64 = 178,
    V_CMPX_LE_I64 = 179,
    V_CMPX_GT_I64 = 180,
    V_CMPX_NE_I64 = 181,
    V_CMPX_GE_I64 = 182,
    V_CMPX_T_I64 = 183,
    V_CMPX_CLASS_F64 = 184,
    V_CMPX_LT_U16 = 185,
    V_CMPX_EQ_U16 = 186,
    V_CMPX_LE_U16 = 187,
    V_CMPX_GT_U16 = 188,
    V_CMPX_NE_U16 = 189,
    V_CMPX_GE_U16 = 190,
    V_CMP_F_U32 = 192,
    V_CMP_LT_U32 = 193,
    V_CMP_EQ_U32 = 194,
    V_CMP_LE_U32 = 195,
    V_CMP_GT_U32 = 196,
    V_CMP_NE_U32 = 197,
    V_CMP_GE_U32 = 198,
    V_CMP_T_U32 = 199,
    V_CMP_F_F16 = 200,
    V_CMP_LT_F16 = 201,
    V_CMP_EQ_F16 = 202,
    V_CMP_LE_F16 = 203,
    V_CMP_GT_F16 = 204,
    V_CMP_LG_F16 = 205,
    V_CMP_GE_F16 = 206,
    V_CMP_O_F16 = 207,
    V_CMPX_F_U32 = 208,
    V_CMPX_LT_U32 = 209,
    V_CMPX_EQ_U32 = 210,
    V_CMPX_LE_U32 = 211,
    V_CMPX_GT_U32 = 212,
    V_CMPX_NE_U32 = 213,
    V_CMPX_GE_U32 = 214,
    V_CMPX_T_U32 = 215,
    V_CMPX_F_F16 = 216,
    V_CMPX_LT_F16 = 217,
    V_CMPX_EQ_F16 = 218,
    V_CMPX_LE_F16 = 219,
    V_CMPX_GT_F16 = 220,
    V_CMPX_LG_F16 = 221,
    V_CMPX_GE_F16 = 222,
    V_CMPX_O_F16 = 223,
    V_CMP_F_U64 = 224,
    V_CMP_LT_U64 = 225,
    V_CMP_EQ_U64 = 226,
    V_CMP_LE_U64 = 227,
    V_CMP_GT_U64 = 228,
    V_CMP_NE_U64 = 229,
    V_CMP_GE_U64 = 230,
    V_CMP_T_U64 = 231,
    V_CMP_U_F16 = 232,
    V_CMP_NGE_F16 = 233,
    V_CMP_NLG_F16 = 234,
    V_CMP_NGT_F16 = 235,
    V_CMP_NLE_F16 = 236,
    V_CMP_NEQ_F16 = 237,
    V_CMP_NLT_F16 = 238,
    V_CMP_TRU_F16 = 239,
    V_CMPX_F_U64 = 240,
    V_CMPX_LT_U64 = 241,
    V_CMPX_EQ_U64 = 242,
    V_CMPX_LE_U64 = 243,
    V_CMPX_GT_U64 = 244,
    V_CMPX_NE_U64 = 245,
    V_CMPX_GE_U64 = 246,
    V_CMPX_T_U64 = 247,
    V_CMPX_U_F16 = 248,
    V_CMPX_NGE_F16 = 249,
    V_CMPX_NLG_F16 = 250,
    V_CMPX_NGT_F16 = 251,
    V_CMPX_NLE_F16 = 252,
    V_CMPX_NEQ_F16 = 253,
    V_CMPX_NLT_F16 = 254,
    V_CMPX_TRU_F16 = 255,
}

// We duplicate the opcode for VOP1/VOP2/VOPC in VOP3AB to simplify decoding the instructions
#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VOP3ABOpcode {
    // VOP1 using VOP3 encoding
    V_NOP = 384,
    V_MOV_B32 = 385,
    V_READFIRSTLANE_B32 = 386,
    V_CVT_I32_F64 = 387,
    V_CVT_F64_I32 = 388,
    V_CVT_F32_I32 = 389,
    V_CVT_F32_U32 = 390,
    V_CVT_U32_F32 = 391,
    V_CVT_I32_F32 = 392,
    V_CVT_F16_F32 = 394,
    V_CVT_F32_F16 = 395,
    V_CVT_RPI_I32_F32 = 396,
    V_CVT_FLR_I32_F32 = 397,
    V_CVT_OFF_F32_I4 = 398,
    V_CVT_F32_F64 = 399,
    V_CVT_F64_F32 = 400,
    V_CVT_F32_UBYTE0 = 401,
    V_CVT_F32_UBYTE1 = 402,
    V_CVT_F32_UBYTE2 = 403,
    V_CVT_F32_UBYTE3 = 404,
    V_CVT_U32_F64 = 405,
    V_CVT_F64_U32 = 406,
    V_TRUNC_F64 = 407,
    V_CEIL_F64 = 408,
    V_RNDNE_F64 = 409,
    V_FLOOR_F64 = 410,
    V_PIPEFLUSH = 411,
    V_FRACT_F32 = 416,
    V_TRUNC_F32 = 417,
    V_CEIL_F32 = 418,
    V_RNDNE_F32 = 419,
    V_FLOOR_F32 = 420,
    V_EXP_F32 = 421,
    V_LOG_F32 = 423,
    V_RCP_F32 = 426,
    V_RCP_IFLAG_F32 = 427,
    V_RSQ_F32 = 430,
    V_RCP_F64 = 431,
    V_RSQ_F64 = 433,
    V_SQRT_F32 = 435,
    V_SQRT_F64 = 436,
    V_SIN_F32 = 437,
    V_COS_F32 = 438,
    V_NOT_B32 = 439,
    V_BFREV_B32 = 440,
    V_FFBH_U32 = 441,
    V_FFBL_B32 = 442,
    V_FFBH_I32 = 443,
    V_FREXP_EXP_I32_F64 = 444,
    V_FREXP_MANT_F64 = 445,
    V_FRACT_F64 = 446,
    V_FREXP_EXP_I32_F32 = 447,
    V_FREXP_MANT_F32 = 448,
    V_CLREXCP = 449,
    V_MOVRELD_B32 = 450,
    V_MOVRELS_B32 = 451,
    V_MOVRELSD_B32 = 452,
    V_MOVRELSD_2_B32 = 456,
    V_CVT_F16_U16 = 464,
    V_CVT_F16_I16 = 465,
    V_CVT_U16_F16 = 466,
    V_CVT_I16_F16 = 467,
    V_RCP_F16 = 468,
    V_SQRT_F16 = 469,
    V_RSQ_F16 = 470,
    V_LOG_F16 = 471,
    V_EXP_F16 = 472,
    V_FREXP_MANT_F16 = 473,
    V_FREXP_EXP_I16_F16 = 474,
    V_FLOOR_F16 = 475,
    V_CEIL_F16 = 476,
    V_TRUNC_F16 = 477,
    V_RNDNE_F16 = 478,
    V_FRACT_F16 = 479,
    V_SIN_F16 = 480,
    V_COS_F16 = 481,
    V_SAT_PK_U8_I16 = 482,
    V_CVT_NORM_I16_F16 = 483,
    V_CVT_NORM_U16_F16 = 484,
    V_SWAP_B32 = 485,
    V_SWAPREL_B32 = 488,
    // VOP2 using VOP3 encoding
    V_CNDMASK_B32 = 257,
    V_DOT2C_F32_F16 = 258,
    V_ADD_F32 = 259,
    V_SUB_F32 = 260,
    V_SUBREV_F32 = 261,
    V_FMAC_LEGACY_F32 = 262,
    V_MUL_LEGACY_F32 = 263,
    V_MUL_F32 = 264,
    V_MUL_I32_I24 = 265,
    V_MUL_HI_I32_I24 = 266,
    V_MUL_U32_U24 = 267,
    V_MUL_HI_U32_U24 = 268,
    V_DOT4C_I32_I8 = 269,
    V_MIN_F32 = 271,
    V_MAX_F32 = 272,
    V_MIN_I32 = 273,
    V_MAX_I32 = 274,
    V_MIN_U32 = 275,
    V_MAX_U32 = 276,
    V_LSHRREV_B32 = 278,
    V_ASHRREV_I32 = 280,
    V_LSHLREV_B32 = 282,
    V_AND_B32 = 283,
    V_OR_B32 = 284,
    V_XOR_B32 = 285,
    V_XNOR_B32 = 286,
    V_ADD_NC_U32 = 293,
    V_SUB_NC_U32 = 294,
    V_SUBREV_NC_U32 = 295,
    V_ADD_CO_CI_U32 = 296,
    V_SUB_CO_CI_U32 = 297,
    V_SUBREV_CO_CI_U32 = 298,
    V_FMAC_F32 = 299,
    V_FMAMK_F32 = 300,
    V_FMAAK_F32 = 301,
    V_CVT_PKRTZ_F16_F32 = 303,
    V_ADD_F16 = 306,
    V_SUB_F16 = 307,
    V_SUBREV_F16 = 308,
    V_MUL_F16 = 309,
    V_FMAC_F16 = 310,
    V_FMAMK_F16 = 311,
    V_FMAAK_F16 = 312,
    V_MAX_F16 = 313,
    V_MIN_F16 = 314,
    V_LDEXP_F16 = 315,
    V_PK_FMAC_F16 = 316,
    // VOPC using VOP3 encoding
    V_CMP_F_F32 = 0,
    V_CMP_LT_F32 = 1,
    V_CMP_EQ_F32 = 2,
    V_CMP_LE_F32 = 3,
    V_CMP_GT_F32 = 4,
    V_CMP_LG_F32 = 5,
    V_CMP_GE_F32 = 6,
    V_CMP_O_F32 = 7,
    V_CMP_U_F32 = 8,
    V_CMP_NGE_F32 = 9,
    V_CMP_NLG_F32 = 10,
    V_CMP_NGT_F32 = 11,
    V_CMP_NLE_F32 = 12,
    V_CMP_NEQ_F32 = 13,
    V_CMP_NLT_F32 = 14,
    V_CMP_TRU_F32 = 15,
    V_CMPX_F_F32 = 16,
    V_CMPX_LT_F32 = 17,
    V_CMPX_EQ_F32 = 18,
    V_CMPX_LE_F32 = 19,
    V_CMPX_GT_F32 = 20,
    V_CMPX_LG_F32 = 21,
    V_CMPX_GE_F32 = 22,
    V_CMPX_O_F32 = 23,
    V_CMPX_U_F32 = 24,
    V_CMPX_NGE_F32 = 25,
    V_CMPX_NLG_F32 = 26,
    V_CMPX_NGT_F32 = 27,
    V_CMPX_NLE_F32 = 28,
    V_CMPX_NEQ_F32 = 29,
    V_CMPX_NLT_F32 = 30,
    V_CMPX_TRU_F32 = 31,
    V_CMP_F_F64 = 32,
    V_CMP_LT_F64 = 33,
    V_CMP_EQ_F64 = 34,
    V_CMP_LE_F64 = 35,
    V_CMP_GT_F64 = 36,
    V_CMP_LG_F64 = 37,
    V_CMP_GE_F64 = 38,
    V_CMP_O_F64 = 39,
    V_CMP_U_F64 = 40,
    V_CMP_NGE_F64 = 41,
    V_CMP_NLG_F64 = 42,
    V_CMP_NGT_F64 = 43,
    V_CMP_NLE_F64 = 44,
    V_CMP_NEQ_F64 = 45,
    V_CMP_NLT_F64 = 46,
    V_CMP_TRU_F64 = 47,
    V_CMPX_F_F64 = 48,
    V_CMPX_LT_F64 = 49,
    V_CMPX_EQ_F64 = 50,
    V_CMPX_LE_F64 = 51,
    V_CMPX_GT_F64 = 52,
    V_CMPX_LG_F64 = 53,
    V_CMPX_GE_F64 = 54,
    V_CMPX_O_F64 = 55,
    V_CMPX_U_F64 = 56,
    V_CMPX_NGE_F64 = 57,
    V_CMPX_NLG_F64 = 58,
    V_CMPX_NGT_F64 = 59,
    V_CMPX_NLE_F64 = 60,
    V_CMPX_NEQ_F64 = 61,
    V_CMPX_NLT_F64 = 62,
    V_CMPX_TRU_F64 = 63,
    V_CMP_F_I32 = 128,
    V_CMP_LT_I32 = 129,
    V_CMP_EQ_I32 = 130,
    V_CMP_LE_I32 = 131,
    V_CMP_GT_I32 = 132,
    V_CMP_NE_I32 = 133,
    V_CMP_GE_I32 = 134,
    V_CMP_T_I32 = 135,
    V_CMP_CLASS_F32 = 136,
    V_CMP_LT_I16 = 137,
    V_CMP_EQ_I16 = 138,
    V_CMP_LE_I16 = 139,
    V_CMP_GT_I16 = 140,
    V_CMP_NE_I16 = 141,
    V_CMP_GE_I16 = 142,
    V_CMP_CLASS_F16 = 143,
    V_CMPX_F_I32 = 144,
    V_CMPX_LT_I32 = 145,
    V_CMPX_EQ_I32 = 146,
    V_CMPX_LE_I32 = 147,
    V_CMPX_GT_I32 = 148,
    V_CMPX_NE_I32 = 149,
    V_CMPX_GE_I32 = 150,
    V_CMPX_T_I32 = 151,
    V_CMPX_CLASS_F32 = 152,
    V_CMPX_LT_I16 = 153,
    V_CMPX_EQ_I16 = 154,
    V_CMPX_LE_I16 = 155,
    V_CMPX_GT_I16 = 156,
    V_CMPX_NE_I16 = 157,
    V_CMPX_GE_I16 = 158,
    V_CMPX_CLASS_F16 = 159,
    V_CMP_F_I64 = 160,
    V_CMP_LT_I64 = 161,
    V_CMP_EQ_I64 = 162,
    V_CMP_LE_I64 = 163,
    V_CMP_GT_I64 = 164,
    V_CMP_NE_I64 = 165,
    V_CMP_GE_I64 = 166,
    V_CMP_T_I64 = 167,
    V_CMP_CLASS_F64 = 168,
    V_CMP_LT_U16 = 169,
    V_CMP_EQ_U16 = 170,
    V_CMP_LE_U16 = 171,
    V_CMP_GT_U16 = 172,
    V_CMP_NE_U16 = 173,
    V_CMP_GE_U16 = 174,
    V_CMPX_F_I64 = 176,
    V_CMPX_LT_I64 = 177,
    V_CMPX_EQ_I64 = 178,
    V_CMPX_LE_I64 = 179,
    V_CMPX_GT_I64 = 180,
    V_CMPX_NE_I64 = 181,
    V_CMPX_GE_I64 = 182,
    V_CMPX_T_I64 = 183,
    V_CMPX_CLASS_F64 = 184,
    V_CMPX_LT_U16 = 185,
    V_CMPX_EQ_U16 = 186,
    V_CMPX_LE_U16 = 187,
    V_CMPX_GT_U16 = 188,
    V_CMPX_NE_U16 = 189,
    V_CMPX_GE_U16 = 190,
    V_CMP_F_U32 = 192,
    V_CMP_LT_U32 = 193,
    V_CMP_EQ_U32 = 194,
    V_CMP_LE_U32 = 195,
    V_CMP_GT_U32 = 196,
    V_CMP_NE_U32 = 197,
    V_CMP_GE_U32 = 198,
    V_CMP_T_U32 = 199,
    V_CMP_F_F16 = 200,
    V_CMP_LT_F16 = 201,
    V_CMP_EQ_F16 = 202,
    V_CMP_LE_F16 = 203,
    V_CMP_GT_F16 = 204,
    V_CMP_LG_F16 = 205,
    V_CMP_GE_F16 = 206,
    V_CMP_O_F16 = 207,
    V_CMPX_F_U32 = 208,
    V_CMPX_LT_U32 = 209,
    V_CMPX_EQ_U32 = 210,
    V_CMPX_LE_U32 = 211,
    V_CMPX_GT_U32 = 212,
    V_CMPX_NE_U32 = 213,
    V_CMPX_GE_U32 = 214,
    V_CMPX_T_U32 = 215,
    V_CMPX_F_F16 = 216,
    V_CMPX_LT_F16 = 217,
    V_CMPX_EQ_F16 = 218,
    V_CMPX_LE_F16 = 219,
    V_CMPX_GT_F16 = 220,
    V_CMPX_LG_F16 = 221,
    V_CMPX_GE_F16 = 222,
    V_CMPX_O_F16 = 223,
    V_CMP_F_U64 = 224,
    V_CMP_LT_U64 = 225,
    V_CMP_EQ_U64 = 226,
    V_CMP_LE_U64 = 227,
    V_CMP_GT_U64 = 228,
    V_CMP_NE_U64 = 229,
    V_CMP_GE_U64 = 230,
    V_CMP_T_U64 = 231,
    V_CMP_U_F16 = 232,
    V_CMP_NGE_F16 = 233,
    V_CMP_NLG_F16 = 234,
    V_CMP_NGT_F16 = 235,
    V_CMP_NLE_F16 = 236,
    V_CMP_NEQ_F16 = 237,
    V_CMP_NLT_F16 = 238,
    V_CMP_TRU_F16 = 239,
    V_CMPX_F_U64 = 240,
    V_CMPX_LT_U64 = 241,
    V_CMPX_EQ_U64 = 242,
    V_CMPX_LE_U64 = 243,
    V_CMPX_GT_U64 = 244,
    V_CMPX_NE_U64 = 245,
    V_CMPX_GE_U64 = 246,
    V_CMPX_T_U64 = 247,
    V_CMPX_U_F16 = 248,
    V_CMPX_NGE_F16 = 249,
    V_CMPX_NLG_F16 = 250,
    V_CMPX_NGT_F16 = 251,
    V_CMPX_NLE_F16 = 252,
    V_CMPX_NEQ_F16 = 253,
    V_CMPX_NLT_F16 = 254,
    V_CMPX_TRU_F16 = 255,
    // VOP3 specific opcodes
    V_FMA_LEGACY_F32 = 320,
    V_MAD_I32_I24 = 322,
    V_MAD_U32_U24 = 323,
    V_CUBEID_F32 = 324,
    V_CUBESC_F32 = 325,
    V_CUBETC_F32 = 326,
    V_CUBEMA_F32 = 327,
    V_BFE_U32 = 328,
    V_BFE_I32 = 329,
    V_BFI_B32 = 330,
    V_FMA_F32 = 331,
    V_FMA_F64 = 332,
    V_LERP_U8 = 333,
    V_ALIGNBIT_B32 = 334,
    V_ALIGNBYTE_B32 = 335,
    V_MULLIT_F32 = 336,
    V_MIN3_F32 = 337,
    V_MIN3_I32 = 338,
    V_MIN3_U32 = 339,
    V_MAX3_F32 = 340,
    V_MAX3_I32 = 341,
    V_MAX3_U32 = 342,
    V_MED3_F32 = 343,
    V_MED3_I32 = 344,
    V_MED3_U32 = 345,
    V_SAD_U8 = 346,
    V_SAD_HI_U8 = 347,
    V_SAD_U16 = 348,
    V_SAD_U32 = 349,
    V_CVT_PK_U8_F32 = 350,
    V_DIV_FIXUP_F32 = 351,
    V_DIV_FIXUP_F64 = 352,
    V_ADD_F64 = 356,
    V_MUL_F64 = 357,
    V_MIN_F64 = 358,
    V_MAX_F64 = 359,
    V_LDEXP_F64 = 360,
    V_MUL_LO_U32 = 361,
    V_MUL_HI_U32 = 362,
    V_MUL_HI_I32 = 364,
    V_DIV_SCALE_F32 = 365,
    V_DIV_SCALE_F64 = 366,
    V_DIV_FMAS_F32 = 367,
    V_DIV_FMAS_F64 = 368,
    V_MSAD_U8 = 369,
    V_QSAD_PK_U16_U8 = 370,
    V_MQSAD_PK_U16_U8 = 371,
    V_TRIG_PREOP_F64 = 372,
    V_MQSAD_U32_U8 = 373,
    V_MAD_U64_U32 = 374,
    V_MAD_I64_I32 = 375,
    V_XOR3_B32 = 376,
    V_LSHLREV_B64 = 767,
    V_LSHRREV_B64 = 768,
    V_ASHRREV_I64 = 769,
    V_ADD_NC_U16 = 771,
    V_SUB_NC_U16 = 772,
    V_MUL_LO_U16 = 773,
    V_LSHRREV_B16 = 775,
    V_ASHRREV_I16 = 776,
    V_MAX_U16 = 777,
    V_MAX_I16 = 778,
    V_MIN_U16 = 779,
    V_MIN_I16 = 780,
    V_ADD_NC_I16 = 781,
    V_SUB_NC_I16 = 782,
    V_ADD_CO_U32 = 783,
    V_SUB_CO_U32 = 784,
    V_PACK_B32_F16 = 785,
    V_CVT_PKNORM_I16_F16 = 786,
    V_CVT_PKNORM_U16_F16 = 787,
    V_LSHLREV_B16 = 788,
    V_SUBREV_CO_U32 = 793,
    V_MAD_U16 = 832,
    V_INTERP_P1LL_F16 = 834,
    V_INTERP_P1LV_F16 = 835,
    V_PERM_B32 = 836,
    V_XAD_U32 = 837,
    V_LSHL_ADD_U32 = 838,
    V_ADD_LSHL_U32 = 839,
    V_FMA_F16 = 843,
    V_MIN3_F16 = 849,
    V_MIN3_I16 = 850,
    V_MIN3_U16 = 851,
    V_MAX3_F16 = 852,
    V_MAX3_I16 = 853,
    V_MAX3_U16 = 854,
    V_MED3_F16 = 855,
    V_MED3_I16 = 856,
    V_MED3_U16 = 857,
    V_INTERP_P2_F16 = 858,
    V_MAD_I16 = 862,
    V_DIV_FIXUP_F16 = 863,
    V_READLANE_B32 = 864,
    V_WRITELANE_B32 = 865,
    V_LDEXP_F32 = 866,
    V_BFM_B32 = 867,
    V_BCNT_U32_B32 = 868,
    V_MBCNT_LO_U32_B32 = 869,
    V_MBCNT_HI_U32_B32 = 870,
    V_CVT_PKNORM_I16_F32 = 872,
    V_CVT_PKNORM_U16_F32 = 873,
    V_CVT_PK_U16_U32 = 874,
    V_CVT_PK_I16_I32 = 875,
    V_ADD3_U32 = 877,
    V_LSHL_OR_B32 = 879,
    V_AND_OR_B32 = 881,
    V_OR3_B32 = 882,
    V_MAD_U32_U16 = 883,
    V_MAD_I32_I16 = 885,
    V_SUB_NC_I32 = 886,
    V_PERMLANE16_B32 = 887,
    V_PERMLANEX16_B32 = 888,
    V_ADD_NC_I32 = 895,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VOP3POpcode {
    V_PK_MAD_I16 = 0,
    V_PK_MUL_LO_U16 = 1,
    V_PK_ADD_I16 = 2,
    V_PK_SUB_I16 = 3,
    V_PK_LSHLREV_B16 = 4,
    V_PK_LSHRREV_B16 = 5,
    V_PK_ASHRREV_I16 = 6,
    V_PK_MAX_I16 = 7,
    V_PK_MIN_I16 = 8,
    V_PK_MAD_U16 = 9,
    V_PK_ADD_U16 = 10,
    V_PK_SUB_U16 = 11,
    V_PK_MAX_U16 = 12,
    V_PK_MIN_U16 = 13,
    V_PK_ADD_F16 = 15,
    V_PK_MUL_F16 = 16,
    V_PK_MIN_F16 = 17,
    V_PK_MAX_F16 = 18,
    V_DOT2_F32_F16 = 19,
    V_DOT2_I32_I16 = 20,
    V_DOT2_U32_U16 = 21,
    V_DOT4_I32_I8 = 22,
    V_DOT4_U32_U8 = 23,
    V_DOT8_I32_I4 = 24,
    V_DOT8_U32_U4 = 25,
    V_FMA_MIX_F32 = 32,
    V_FMA_MIXLO_F16 = 33,
    V_FMA_MIXHI_F16 = 34,
    V_PK_FMA_F16 = 14,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum VINTRPOpcode {
    V_INTERP_P1_F32 = 0,
    V_INTERP_P2_F32 = 1,
    V_INTERP_MOV_F32 = 2,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum VMEMOpcode {
    GLOBAL_LOAD_UBYTE = 8,
    GLOBAL_LOAD_SBYTE = 9,
    GLOBAL_LOAD_USHORT = 10,
    GLOBAL_LOAD_SSHORT = 11,
    GLOBAL_LOAD_DWORD = 12,
    GLOBAL_LOAD_DWORDX2 = 13,
    GLOBAL_LOAD_DWORDX4 = 14,
    GLOBAL_LOAD_DWORDX3 = 15,
    GLOBAL_LOAD_DWORD_ADDTID = 22,
    GLOBAL_STORE_DWORD_ADDTID = 23,
    GLOBAL_STORE_BYTE = 24,
    GLOBAL_STORE_BYTE_D16_HI = 25,
    GLOBAL_STORE_SHORT = 26,
    GLOBAL_STORE_SHORT_D16_HI = 27,
    GLOBAL_STORE_DWORD = 28,
    GLOBAL_STORE_DWORDX2 = 29,
    GLOBAL_STORE_DWORDX4 = 30,
    GLOBAL_STORE_DWORDX3 = 31,
    GLOBAL_LOAD_UBYTE_D16 = 32,
    GLOBAL_LOAD_UBYTE_D16_HI = 33,
    GLOBAL_LOAD_SBYTE_D16 = 34,
    GLOBAL_LOAD_SBYTE_D16_HI = 35,
    GLOBAL_LOAD_SHORT_D16 = 36,
    GLOBAL_LOAD_SHORT_D16_HI = 37,
    GLOBAL_ATOMIC_SWAP = 48,
    GLOBAL_ATOMIC_CMPSWAP = 49,
    GLOBAL_ATOMIC_ADD = 50,
    GLOBAL_ATOMIC_SUB = 51,
    GLOBAL_ATOMIC_CSUB = 52,
    GLOBAL_ATOMIC_SMIN = 53,
    GLOBAL_ATOMIC_UMIN = 54,
    GLOBAL_ATOMIC_SMAX = 55,
    GLOBAL_ATOMIC_UMAX = 56,
    GLOBAL_ATOMIC_AND = 57,
    GLOBAL_ATOMIC_OR = 58,
    GLOBAL_ATOMIC_XOR = 59,
    GLOBAL_ATOMIC_INC = 60,
    GLOBAL_ATOMIC_DEC = 61,
    GLOBAL_ATOMIC_FCMPSWAP = 62,
    GLOBAL_ATOMIC_FMIN = 63,
    GLOBAL_ATOMIC_FMAX = 64,
    GLOBAL_ATOMIC_SWAP_X2 = 80,
    GLOBAL_ATOMIC_CMPSWAP_X2 = 81,
    GLOBAL_ATOMIC_ADD_X2 = 82,
    GLOBAL_ATOMIC_SUB_X2 = 83,
    GLOBAL_ATOMIC_SMIN_X2 = 85,
    GLOBAL_ATOMIC_UMIN_X2 = 86,
    GLOBAL_ATOMIC_SMAX_X2 = 87,
    GLOBAL_ATOMIC_UMAX_X2 = 88,
    GLOBAL_ATOMIC_AND_X2 = 89,
    GLOBAL_ATOMIC_OR_X2 = 90,
    GLOBAL_ATOMIC_XOR_X2 = 91,
    GLOBAL_ATOMIC_INC_X2 = 92,
    GLOBAL_ATOMIC_DEC_X2 = 93,
    GLOBAL_ATOMIC_FCMPSWAP_X2 = 94,
    GLOBAL_ATOMIC_FMIN_X2 = 95,
    GLOBAL_ATOMIC_FMAX_X2 = 96,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum FlatOpcode {
    FLAT_LOAD_UBYTE = 8,
    FLAT_LOAD_SBYTE = 9,
    FLAT_LOAD_USHORT = 10,
    FLAT_LOAD_SSHORT = 11,
    FLAT_LOAD_DWORD = 12,
    FLAT_LOAD_DWORDX2 = 13,
    FLAT_LOAD_DWORDX4 = 14,
    FLAT_LOAD_DWORDX3 = 15,
    FLAT_STORE_BYTE = 24,
    FLAT_STORE_BYTE_D16_HI = 25,
    FLAT_STORE_SHORT = 26,
    FLAT_STORE_SHORT_D16_HI = 27,
    FLAT_STORE_DWORD = 28,
    FLAT_STORE_DWORDX2 = 29,
    FLAT_STORE_DWORDX4 = 30,
    FLAT_STORE_DWORDX3 = 31,
    FLAT_LOAD_UBYTE_D16 = 32,
    FLAT_LOAD_UBYTE_D16_HI = 33,
    FLAT_LOAD_SBYTE_D16 = 34,
    FLAT_LOAD_SBYTE_D16_HI = 35,
    FLAT_LOAD_SHORT_D16 = 36,
    FLAT_LOAD_SHORT_D16_HI = 37,
    FLAT_ATOMIC_SWAP = 48,
    FLAT_ATOMIC_CMPSWAP = 49,
    FLAT_ATOMIC_ADD = 50,
    FLAT_ATOMIC_SUB = 51,
    FLAT_ATOMIC_SMIN = 53,
    FLAT_ATOMIC_UMIN = 54,
    FLAT_ATOMIC_SMAX = 55,
    FLAT_ATOMIC_UMAX = 56,
    FLAT_ATOMIC_AND = 57,
    FLAT_ATOMIC_OR = 58,
    FLAT_ATOMIC_XOR = 59,
    FLAT_ATOMIC_INC = 60,
    FLAT_ATOMIC_DEC = 61,
    FLAT_ATOMIC_FCMPSWAP = 62,
    FLAT_ATOMIC_FMIN = 63,
    FLAT_ATOMIC_FMAX = 64,
    FLAT_ATOMIC_SWAP_X2 = 80,
    FLAT_ATOMIC_CMPSWAP_X2 = 81,
    FLAT_ATOMIC_ADD_X2 = 82,
    FLAT_ATOMIC_SUB_X2 = 83,
    FLAT_ATOMIC_SMIN_X2 = 85,
    FLAT_ATOMIC_UMIN_X2 = 86,
    FLAT_ATOMIC_SMAX_X2 = 87,
    FLAT_ATOMIC_UMAX_X2 = 88,
    FLAT_ATOMIC_AND_X2 = 89,
    FLAT_ATOMIC_OR_X2 = 90,
    FLAT_ATOMIC_XOR_X2 = 91,
    FLAT_ATOMIC_INC_X2 = 92,
    FLAT_ATOMIC_DEC_X2 = 93,
    FLAT_ATOMIC_FCMPSWAP_X2 = 94,
    FLAT_ATOMIC_FMIN_X2 = 95,
    FLAT_ATOMIC_FMAX_X2 = 96,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum SCRATCHOpcode {
    SCRATCH_LOAD_UBYTE = 8,
    SCRATCH_LOAD_SBYTE = 9,
    SCRATCH_LOAD_USHORT = 10,
    SCRATCH_LOAD_SSHORT = 11,
    SCRATCH_LOAD_DWORD = 12,
    SCRATCH_LOAD_DWORDX2 = 13,
    SCRATCH_LOAD_DWORDX4 = 14,
    SCRATCH_LOAD_DWORDX3 = 15,
    SCRATCH_STORE_BYTE = 24,
    SCRATCH_STORE_BYTE_D16_HI = 25,
    SCRATCH_STORE_SHORT = 26,
    SCRATCH_STORE_SHORT_D16_HI = 27,
    SCRATCH_STORE_DWORD = 28,
    SCRATCH_STORE_DWORDX2 = 29,
    SCRATCH_STORE_DWORDX4 = 30,
    SCRATCH_STORE_DWORDX3 = 31,
    SCRATCH_LOAD_UBYTE_D16 = 32,
    SCRATCH_LOAD_UBYTE_D16_HI = 33,
    SCRATCH_LOAD_SBYTE_D16 = 34,
    SCRATCH_LOAD_SBYTE_D16_HI = 35,
    SCRATCH_LOAD_SHORT_D16 = 36,
    SCRATCH_LOAD_SHORT_D16_HI = 37,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum LDSGDSOpcode {
    DS_ADD_U32 = 0,
    DS_SUB_U32 = 1,
    DS_RSUB_U32 = 2,
    DS_INC_U32 = 3,
    DS_DEC_U32 = 4,
    DS_MIN_I32 = 5,
    DS_MAX_I32 = 6,
    DS_MIN_U32 = 7,
    DS_MAX_U32 = 8,
    DS_AND_B32 = 9,
    DS_OR_B32 = 10,
    DS_XOR_B32 = 11,
    DS_MSKOR_B32 = 12,
    DS_WRITE_B32 = 13,
    DS_WRITE2_B32 = 14,
    DS_WRITE2ST64_B32 = 15,
    DS_CMPST_B32 = 16,
    DS_CMPST_F32 = 17,
    DS_MIN_F32 = 18,
    DS_MAX_F32 = 19,
    DS_NOP = 20,
    DS_ADD_F32 = 21,
    DS_GWS_SEMA_RELEASE_ALL = 24,
    DS_GWS_INIT = 25,
    DS_GWS_SEMA_V = 26,
    DS_GWS_SEMA_BR = 27,
    DS_GWS_SEMA_P = 28,
    DS_GWS_BARRIER = 29,
    DS_WRITE_B8 = 30,
    DS_WRITE_B16 = 31,
    DS_ADD_RTN_U32 = 32,
    DS_SUB_RTN_U32 = 33,
    DS_RSUB_RTN_U32 = 34,
    DS_INC_RTN_U32 = 35,
    DS_DEC_RTN_U32 = 36,
    DS_MIN_RTN_I32 = 37,
    DS_MAX_RTN_I32 = 38,
    DS_MIN_RTN_U32 = 39,
    DS_MAX_RTN_U32 = 40,
    DS_AND_RTN_B32 = 41,
    DS_OR_RTN_B32 = 42,
    DS_XOR_RTN_B32 = 43,
    DS_MSKOR_RTN_B32 = 44,
    DS_WRXCHG_RTN_B32 = 45,
    DS_WRXCHG2_RTN_B32 = 46,
    DS_WRXCHG2ST64_RTN_B32 = 47,
    DS_CMPST_RTN_B32 = 48,
    DS_CMPST_RTN_F32 = 49,
    DS_MIN_RTN_F32 = 50,
    DS_MAX_RTN_F32 = 51,
    DS_WRAP_RTN_B32 = 52,
    DS_SWIZZLE_B32 = 53,
    DS_READ_B32 = 54,
    DS_READ2_B32 = 55,
    DS_READ2ST64_B32 = 56,
    DS_READ_I8 = 57,
    DS_READ_U8 = 58,
    DS_READ_I16 = 59,
    DS_READ_U16 = 60,
    DS_CONSUME = 61,
    DS_APPEND = 62,
    DS_ORDERED_COUNT = 63,
    DS_ADD_U64 = 64,
    DS_SUB_U64 = 65,
    DS_RSUB_U64 = 66,
    DS_INC_U64 = 67,
    DS_DEC_U64 = 68,
    DS_MIN_I64 = 69,
    DS_MAX_I64 = 70,
    DS_MIN_U64 = 71,
    DS_MAX_U64 = 72,
    DS_AND_B64 = 73,
    DS_OR_B64 = 74,
    DS_XOR_B64 = 75,
    DS_MSKOR_B64 = 76,
    DS_WRITE_B64 = 77,
    DS_WRITE2_B64 = 78,
    DS_WRITE2ST64_B64 = 79,
    DS_CMPST_B64 = 80,
    DS_CMPST_F64 = 81,
    DS_MIN_F64 = 82,
    DS_MAX_F64 = 83,
    DS_ADD_RTN_F32 = 85,
    DS_ADD_RTN_U64 = 96,
    DS_SUB_RTN_U64 = 97,
    DS_RSUB_RTN_U64 = 98,
    DS_INC_RTN_U64 = 99,
    DS_DEC_RTN_U64 = 100,
    DS_MIN_RTN_I64 = 101,
    DS_MAX_RTN_I64 = 102,
    DS_MIN_RTN_U64 = 103,
    DS_MAX_RTN_U64 = 104,
    DS_AND_RTN_B64 = 105,
    DS_OR_RTN_B64 = 106,
    DS_XOR_RTN_B64 = 107,
    DS_MSKOR_RTN_B64 = 108,
    DS_WRXCHG_RTN_B64 = 109,
    DS_WRXCHG2_RTN_B64 = 110,
    DS_WRXCHG2ST64_RTN_B64 = 111,
    DS_CMPST_RTN_B64 = 112,
    DS_CMPST_RTN_F64 = 113,
    DS_MIN_RTN_F64 = 114,
    DS_MAX_RTN_F64 = 115,
    DS_READ_B64 = 118,
    DS_READ2_B64 = 119,
    DS_READ2ST64_B64 = 120,
    DS_CONDXCHG32_RTN_B64 = 126,
    DS_WRITE_B8_D16_HI = 160,
    DS_WRITE_B16_D16_HI = 161,
    DS_READ_U8_D16 = 162,
    DS_READ_U8_D16_HI = 163,
    DS_READ_I8_D16 = 164,
    DS_READ_I8_D16_HI = 165,
    DS_READ_U16_D16 = 166,
    DS_READ_U16_D16_HI = 167,
    DS_WRITE_ADDTID_B32 = 176,
    DS_READ_ADDTID_B32 = 177,
    DS_PERMUTE_B32 = 178,
    DS_BPERMUTE_B32 = 179,
    DS_WRITE_B96 = 222,
    DS_WRITE_B128 = 223,
    DS_READ_B96 = 254,
    DS_READ_B128 = 255,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum MTBUFOpcode {
    TBUFFER_LOAD_FORMAT_X = 0,
    TBUFFER_LOAD_FORMAT_XY = 1,
    TBUFFER_LOAD_FORMAT_XYZ = 2,
    TBUFFER_LOAD_FORMAT_XYZW = 3,
    TBUFFER_STORE_FORMAT_X = 4,
    TBUFFER_STORE_FORMAT_XY = 5,
    TBUFFER_STORE_FORMAT_XYZ = 6,
    TBUFFER_STORE_FORMAT_XYZW = 7,
    TBUFFER_LOAD_FORMAT_D16_X = 8,
    TBUFFER_LOAD_FORMAT_D16_XY = 9,
    TBUFFER_LOAD_FORMAT_D16_XYZ = 10,
    TBUFFER_LOAD_FORMAT_D16_XYZW = 11,
    TBUFFER_STORE_FORMAT_D16_X = 12,
    TBUFFER_STORE_FORMAT_D16_XY = 13,
    TBUFFER_STORE_FORMAT_D16_XYZ = 14,
    TBUFFER_STORE_FORMAT_D16_XYZW = 15,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]
#[allow(non_camel_case_types)]
pub enum MUBUFOpcode {
    BUFFER_LOAD_FORMAT_X = 0,
    BUFFER_LOAD_FORMAT_XY = 1,
    BUFFER_LOAD_FORMAT_XYZ = 2,
    BUFFER_LOAD_FORMAT_XYZW = 3,
    BUFFER_STORE_FORMAT_X = 4,
    BUFFER_STORE_FORMAT_XY = 5,
    BUFFER_STORE_FORMAT_XYZ = 6,
    BUFFER_STORE_FORMAT_XYZW = 7,
    BUFFER_LOAD_UBYTE = 8,
    BUFFER_LOAD_SBYTE = 9,
    BUFFER_LOAD_USHORT = 10,
    BUFFER_LOAD_SSHORT = 11,
    BUFFER_LOAD_DWORD = 12,
    BUFFER_LOAD_DWORDX2 = 13,
    BUFFER_LOAD_DWORDX4 = 14,
    BUFFER_LOAD_DWORDX3 = 15,
    BUFFER_STORE_BYTE = 24,
    BUFFER_STORE_BYTE_D16_HI = 25,
    BUFFER_STORE_SHORT = 26,
    BUFFER_STORE_SHORT_D16_HI = 27,
    BUFFER_STORE_DWORD = 28,
    BUFFER_STORE_DWORDX2 = 29,
    BUFFER_STORE_DWORDX4 = 30,
    BUFFER_STORE_DWORDX3 = 31,
    BUFFER_LOAD_UBYTE_D16 = 32,
    BUFFER_LOAD_UBYTE_D16_HI = 33,
    BUFFER_LOAD_SBYTE_D16 = 34,
    BUFFER_LOAD_SBYTE_D16_HI = 35,
    BUFFER_LOAD_SHORT_D16 = 36,
    BUFFER_LOAD_SHORT_D16_HI = 37,
    BUFFER_LOAD_FORMAT_D16_HI_X = 38,
    BUFFER_STORE_FORMAT_D16_HI_X = 39,
    BUFFER_ATOMIC_SWAP = 48,
    BUFFER_ATOMIC_CMPSWAP = 49,
    BUFFER_ATOMIC_ADD = 50,
    BUFFER_ATOMIC_SUB = 51,
    BUFFER_ATOMIC_CSUB = 52,
    BUFFER_ATOMIC_SMIN = 53,
    BUFFER_ATOMIC_UMIN = 54,
    BUFFER_ATOMIC_SMAX = 55,
    BUFFER_ATOMIC_UMAX = 56,
    BUFFER_ATOMIC_AND = 57,
    BUFFER_ATOMIC_OR = 58,
    BUFFER_ATOMIC_XOR = 59,
    BUFFER_ATOMIC_INC = 60,
    BUFFER_ATOMIC_DEC = 61,
    BUFFER_ATOMIC_FCMPSWAP = 62,
    BUFFER_ATOMIC_FMIN = 63,
    BUFFER_ATOMIC_FMAX = 64,
    BUFFER_ATOMIC_SWAP_X2 = 80,
    BUFFER_ATOMIC_CMPSWAP_X2 = 81,
    BUFFER_ATOMIC_ADD_X2 = 82,
    BUFFER_ATOMIC_SUB_X2 = 83,
    BUFFER_ATOMIC_SMIN_X2 = 85,
    BUFFER_ATOMIC_UMIN_X2 = 86,
    BUFFER_ATOMIC_SMAX_X2 = 87,
    BUFFER_ATOMIC_UMAX_X2 = 88,
    BUFFER_ATOMIC_AND_X2 = 89,
    BUFFER_ATOMIC_OR_X2 = 90,
    BUFFER_ATOMIC_XOR_X2 = 91,
    BUFFER_ATOMIC_INC_X2 = 92,
    BUFFER_ATOMIC_DEC_X2 = 93,
    BUFFER_ATOMIC_FCMPSWAP_X2 = 94,
    BUFFER_ATOMIC_FMIN_X2 = 95,
    BUFFER_ATOMIC_FMAX_X2 = 96,
    BUFFER_GL0_INV = 113,
    BUFFER_GL1_INV = 114,
    BUFFER_LOAD_FORMAT_D16_X = 128,
    BUFFER_LOAD_FORMAT_D16_XY = 129,
    BUFFER_LOAD_FORMAT_D16_XYZ = 130,
    BUFFER_LOAD_FORMAT_D16_XYZW = 131,
    BUFFER_STORE_FORMAT_D16_X = 132,
    BUFFER_STORE_FORMAT_D16_XY = 133,
    BUFFER_STORE_FORMAT_D16_XYZ = 134,
    BUFFER_STORE_FORMAT_D16_XYZW = 135,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum MIMGOpcode {
    IMAGE_LOAD = 0,
    IMAGE_LOAD_MIP = 1,
    IMAGE_LOAD_PCK = 2,
    IMAGE_LOAD_PCK_SGN = 3,
    IMAGE_LOAD_MIP_PCK = 4,
    IMAGE_LOAD_MIP_PCK_SGN = 5,
    IMAGE_STORE = 8,
    IMAGE_STORE_MIP = 9,
    IMAGE_STORE_PCK = 10,
    IMAGE_STORE_MIP_PCK = 11,
    IMAGE_GET_RESINFO = 14,
    IMAGE_ATOMIC_SWAP = 15,
    IMAGE_ATOMIC_CMPSWAP = 16,
    IMAGE_ATOMIC_ADD = 17,
    IMAGE_ATOMIC_SUB = 18,
    IMAGE_ATOMIC_SMIN = 20,
    IMAGE_ATOMIC_UMIN = 21,
    IMAGE_ATOMIC_SMAX = 22,
    IMAGE_ATOMIC_UMAX = 23,
    IMAGE_ATOMIC_AND = 24,
    IMAGE_ATOMIC_OR = 25,
    IMAGE_ATOMIC_XOR = 26,
    IMAGE_ATOMIC_INC = 27,
    IMAGE_ATOMIC_DEC = 28,
    IMAGE_ATOMIC_FCMPSWAP = 29,
    IMAGE_ATOMIC_FMIN = 30,
    IMAGE_ATOMIC_FMAX = 31,
    IMAGE_SAMPLE = 32,
    IMAGE_SAMPLE_CL = 33,
    IMAGE_SAMPLE_D = 34,
    IMAGE_SAMPLE_D_CL = 35,
    IMAGE_SAMPLE_L = 36,
    IMAGE_SAMPLE_B = 37,
    IMAGE_SAMPLE_B_CL = 38,
    IMAGE_SAMPLE_LZ = 39,
    IMAGE_SAMPLE_C = 40,
    IMAGE_SAMPLE_C_CL = 41,
    IMAGE_SAMPLE_C_D = 42,
    IMAGE_SAMPLE_C_D_CL = 43,
    IMAGE_SAMPLE_C_L = 44,
    IMAGE_SAMPLE_C_B = 45,
    IMAGE_SAMPLE_C_B_CL = 46,
    IMAGE_SAMPLE_C_LZ = 47,
    IMAGE_SAMPLE_O = 48,
    IMAGE_SAMPLE_CL_O = 49,
    IMAGE_SAMPLE_D_O = 50,
    IMAGE_SAMPLE_D_CL_O = 51,
    IMAGE_SAMPLE_L_O = 52,
    IMAGE_SAMPLE_B_O = 53,
    IMAGE_SAMPLE_B_CL_O = 54,
    IMAGE_SAMPLE_LZ_O = 55,
    IMAGE_SAMPLE_C_O = 56,
    IMAGE_SAMPLE_C_CL_O = 57,
    IMAGE_SAMPLE_C_D_O = 58,
    IMAGE_SAMPLE_C_D_CL_O = 59,
    IMAGE_SAMPLE_C_L_O = 60,
    IMAGE_SAMPLE_C_B_O = 61,
    IMAGE_SAMPLE_C_B_CL_O = 62,
    IMAGE_SAMPLE_C_LZ_O = 63,
    IMAGE_GATHER4 = 64,
    IMAGE_GATHER4_CL = 65,
    IMAGE_GATHER4_L = 68,
    IMAGE_GATHER4_B = 69,
    IMAGE_GATHER4_B_CL = 70,
    IMAGE_GATHER4_LZ = 71,
    IMAGE_GATHER4_C = 72,
    IMAGE_GATHER4_C_CL = 73,
    IMAGE_GATHER4_C_L = 76,
    IMAGE_GATHER4_C_B = 77,
    IMAGE_GATHER4_C_B_CL = 78,
    IMAGE_GATHER4_C_LZ = 79,
    IMAGE_GATHER4_O = 80,
    IMAGE_GATHER4_CL_O = 81,
    IMAGE_GATHER4_L_O = 84,
    IMAGE_GATHER4_B_O = 85,
    IMAGE_GATHER4_B_CL_O = 86,
    IMAGE_GATHER4_LZ_O = 87,
    IMAGE_GATHER4_C_O = 88,
    IMAGE_GATHER4_C_CL_O = 89,
    IMAGE_GATHER4_C_L_O = 92,
    IMAGE_GATHER4_C_B_O = 93,
    IMAGE_GATHER4_C_B_CL_O = 94,
    IMAGE_GATHER4_C_LZ_O = 95,
    IMAGE_GET_LOD = 96,
    IMAGE_GATHER4H = 97,
    IMAGE_MSAA_LOAD = 128,
    IMAGE_SAMPLE_D_G16 = 162,
    IMAGE_SAMPLE_D_CL_G16 = 163,
    IMAGE_SAMPLE_C_D_G16 = 170,
    IMAGE_SAMPLE_C_D_CL_G16 = 171,
    IMAGE_SAMPLE_D_O_G16 = 178,
    IMAGE_SAMPLE_D_CL_O_G16 = 179,
    IMAGE_SAMPLE_C_D_O_G16 = 186,
    IMAGE_SAMPLE_C_D_CL_O_G16 = 187,
    IMAGE_BVH_INTERSECT_RAY = 230,
    IMAGE_BVH64_INTERSECT_RAY = 231,
}

#[derive(Opcode, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[allow(non_camel_case_types)]
pub enum EXPOpcode {
    EXPORT = 0,
}

impl SOPPOpcode {
    pub fn is_branch(&self) -> bool {
        use SOPPOpcode::*;
        matches!(
            self,
            S_BRANCH
                | S_CBRANCH_SCC0
                | S_CBRANCH_SCC1
                | S_CBRANCH_VCCZ
                | S_CBRANCH_VCCNZ
                | S_CBRANCH_EXECZ
                | S_CBRANCH_EXECNZ
        )
    }
}

impl VOP3ABOpcode {
    pub fn is_vop3b(&self) -> bool {
        use VOP3ABOpcode::*;
        matches!(
            self,
            V_ADD_CO_U32
                | V_SUB_CO_U32
                | V_SUBREV_CO_U32
                | V_ADD_CO_CI_U32
                | V_SUB_CO_CI_U32
                | V_SUBREV_CO_CI_U32
                | V_DIV_SCALE_F32
                | V_DIV_SCALE_F64
                | V_MAD_U64_U32
                | V_MAD_I64_I32
        )
    }
}
